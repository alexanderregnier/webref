{
  "name": "SharedStorage",
  "type": "interface",
  "defined": {
    "spec": {
      "title": "Shared Storage API",
      "url": "https://wicg.github.io/shared-storage/"
    },
    "fragment": "[Exposed=(Window,SharedStorageWorklet)]\ninterface SharedStorage {\n  Promise<DOMString> get(DOMString key);\n  Promise<any> set(DOMString key,\n                   DOMString value,\n                   optional SharedStorageSetMethodOptions options = {});\n  Promise<any> append(DOMString key,\n                      DOMString value,\n                      optional SharedStorageModifierMethodOptions options = {});\n  Promise<any> delete(DOMString key, optional SharedStorageModifierMethodOptions options = {});\n  Promise<any> clear(optional SharedStorageModifierMethodOptions options = {});\n  Promise<any> batchUpdate(sequence<SharedStorageModifierMethod> methods,\n                           optional SharedStorageModifierMethodOptions options = {});\n\n  [Exposed=Window]\n  Promise<SharedStorageResponse> selectURL(DOMString name,\n                               sequence<SharedStorageUrlWithMetadata> urls,\n                               optional SharedStorageRunOperationMethodOptions options = {});\n\n  [Exposed=Window]\n  Promise<any> run(DOMString name,\n                   optional SharedStorageRunOperationMethodOptions options = {});\n\n  [Exposed=Window]\n  Promise<SharedStorageWorklet> createWorklet(USVString moduleURL, optional SharedStorageWorkletOptions options = {});\n\n  [Exposed=Window]\n  readonly attribute SharedStorageWorklet worklet;\n\n  [Exposed=SharedStorageWorklet]\n  Promise<unsigned long> length();\n\n  [Exposed=SharedStorageWorklet]\n  Promise<double> remainingBudget();\n\n  [Exposed=SharedStorageWorklet]\n  async_iterable<DOMString, DOMString>;\n};",
    "href": "https://wicg.github.io/shared-storage/#sharedstorage"
  },
  "extended": [],
  "inheritance": null,
  "includes": []
}